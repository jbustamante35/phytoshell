#!/bin/bash
#################################################################################
# This is the runner script called by the wrapper script that parses through
# command line arguments to determine how to run the application. The wrapper
# script determines whether to run the application through CyVerse or the
# Open Science Grid,
#
# Pipeline Overview:
#       1) Check input arguments for language, codebase, and application
#       2) Set codebase directory  and configure language environment
#       3) Re-configure argument order and Run command
#
# Authors
#       Nathan Miller, Senior Scientist (ndmill@gmail.com)
#       Julian Bustamante, Graduate Researcher (jbustamante@wisc.edu)
###############################################################################

# Determine verbosity level and then remove it from the arguments
# Any non-zero input defaults to strong verbosity
set -e
verb=$1
set -- "${@:2}"

case $verb in
0)
    vlvl=" "
    ;;

1)
    vlvl="-V"
    ;;

*)
    vlvl="-V"
    ;;

esac

# Check input arguments
printf "* Input Arguments                                            *\n"
printf "*------------------------------------------------------------*\n"
printf "*    Code folder| %s\n" "$1"
printf "* Lang_[o|a]_app| %s\n" "$2"
echo -e "*           Data| ${@:3}\n"
printf "**************************************************************\n"

# Parse through key_value hash to get language_application
lang=$(echo "$2" | cut -f 1 -d _)
ver=$(echo  "$2" | cut -f 2 -d _)
app=$(echo  "$2" | cut -f 3 -d _)

printf "* Results from parsed argument Lang_[o|a]_app                *\n"
printf "*------------------------------------------------------------*\n"
printf "* Lang| %s\n" "$lang"
printf "*  Ver| %s\n" "$ver"
printf "*  App| %s\n" "$app"
printf "**************************************************************\n\n\n"

# Get original and user's code folder from iRODS
ofldr="/iplant/home/nmiller/phytoMorph_public_deploy"
afldr=$1

# Get base names of code bases [ omit iRODS path name ]
obase=$(echo "$ofldr" | rev | cut -d'/' -f 1 | rev)
abase=$(echo "$afldr" | rev | cut -d'/' -f 1 | rev)

code_target_folder=$PWD/loadingdock/codebase
printf "* Downloading original (phytomorph) codebase                 *\n"
printf "* Source folder: %s\n" "$ofldr "
startO=$SECONDS

iget -r $vlvl "$ofldr" "$code_target_folder"

# Replace spaces in path name then move contents to code folder
otmp=$(echo "$code_target_folder/$obase" | sed 's| |\\ |g')
echo "otmp: $otmp"
mv $otmp/* $code_target_folder/o
rmdir "$otmp"

runO=$(($SECONDS-$startO))
printf "*------------------------------------------------------------*\n"
printf "* %s seconds to download original codebase\n" "$runO"
printf "**************************************************************\n"

printf "* Downloading alternate codebase                             *\n"
printf "* Source folder: %s \n" "$afldr"
startA=$SECONDS

case $afldr in
na)
    ;;
*)
    iget -r $vlvl "$afldr" "$code_target_folder"

    # Replace spaces in path name then move contents to code folder
    atmp=$(echo "$code_target_folder/$abase" | sed 's| |\\ |g')
    echo "atmp: $atmp"
    mv $otmp/* $code_target_folder/a
    rmdir "$atmp"
    ;;
esac

runA=$(($SECONDS-$startA))
printf "*------------------------------------------------------------*\n"
printf "* %s seconds to download alternate codebase\n" "$runA"
printf "**************************************************************\n\n\n"

# Make all executables from dependencies folders and set new PATH
mkdir -p $code_target_folder/o/common_dependencies/exe \
         $code_target_folder/a/common_dependencies/exe
chmod -R +x $code_target_folder/o/common_dependencies/exe \
            $code_target_folder/a/common_dependencies/exe
export PATH=$PATH:$code_target_folder/o/common_dependencies/exe:$code_target_folder/a/common_dependencies/exe

# Set codebase directory and configure language environment
case $lang in
m)
    selection="MATLAB"
    cmd=$code_target_folder/$ver/matlab/DEwrapper
    chmod +x "$cmd"
    export LD_LIBRARY_PATH=/lib:/lib65:/usr/lib:/usr/local/lib:/usr/local/mcr/v93/runtime/glnxa64:/usr/local/mcr/v93/bin/glnxa64:/usr/local/mcr/v93/sys/os/glnxa64
    export XAPPLRESDIR=/usr/local/mcr/v93/X11/app-defaults
    ;;

r)
    selection="R"
    cmd="Rscript $code_target_folder/$ver/r/DEwrapper.R"
    ;;

p)
    selection="Python"
    cmd="python $code_target_folder/$ver/python/DEwrapper.py"
    ;;

p2)
    selection="Python2"
    cmd="python2 $code_target_folder/$ver/python/DEwrapper.py"
    ;;

p3)
    selection="Python3"
    cmd="python3 $code_target_folder/$ver/python/DEwrapper.py"
    ;;

o)
    selection="Octave"
    cmd="octave -W $code_target_folder/$ver/octave/DEwrapper.m"

    #fin=$code_target_folder/$ver/octave/DEwrapper.m
    #run="octave --eval \"run('$fin')\""
    #cmd="eval $run"

    #echo "DISPLAY=$(echo $DISPLAY)"
    #echo "Setting DISPLAY to $disp"
    #disp=localhost:0
    #export DISPLAY=$disp
    #echo "DISPLAY=$(echo $DISPLAY)"

    #echo "Initiating Xvfb..."
    #Xvfb :0 -screen 0 800x60x16 &
    #x11vnc -display :0 -N

    ;;

j)
    selection="Julia"
    cmd="julia $code_target_folder/$ver/julia/DEwrapper.jl"
    ;;

mi)
    selection="Interactive MATLAB GUI"
    cmd="$code_target_folder/$ver/matlab/iPlant_ver0"
    cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
    mv /etc/ssh/sshd_config.x11 /etc/sshd/sshd_config
    passwd --stdin plants
    service ssh restart

    cd /usr/local/mcr/v93/sys/os/glnxa64 || exit
    mv libstdc++.so.6 libstdc++.so.6.bak
    cd "$cmd" || exit
    chmod +x "$cmd"
    export LD_LIBRARY_PATH=/lib:/lib65:/usr/lib:/usr/local/lib:/usr/local/mcr/v93/runtime/glnxa64:/usr/local/mcr/v93/bin/glnxa64:/usr/local/mcr/v93/sys/os/glnxa64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
    export XAPPLRESDIR=/usr/local/mcr/v93/X11/app-defaults
    ;;

b)
    selection="Debug Mode"
    cmd=/bin/bash
    ;;

*)
    echo "error: no command specified"
    selection="NO LANGUAGE SELECTED"
    ;;

esac

printf "**************************************************************\n"
printf "* %s selected \n" "$selection"
printf "**************************************************************\n"

# Reconfigure arguments and Run commands
# Sets codebase directory ($1) to empty and sets application to $2
echo -e "*   Pre-arguments| ${@} "

# Remove codebase from $1 in arglist
# Setting application
set -- "" "$app" "${@:3}"

printf "*------------------------------------------------------------*\n"
echo -e "*  Post-arguments| $@ \n"
printf "**************************************************************\n"

echo -e "* Running Command| $cmd $@ \n"
printf "**************************************************************\n"

# Set working directory to data storage location and run app
startC=$SECONDS
cd "$PWD"/loadingdock/userdata/dataout/ || exit
$cmd $@
runC=$(($SECONDS-$startC))

printf "**************************************************************\n"
echo -e "* Ending Command| $cmd $@ \n "
printf "*------------------------------------------------------------*\n"
printf "* %s seconds to run command \n" "$runC"
printf "**************************************************************\n"
