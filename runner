#!/bin/bash
#################################################################################
<<<<<<< HEAD
# This is the wrapper script that serves as the ENTRYPOINT for the phytoshell
# Docker image. It parses through command line arguments to determine the
# codebase and application to run, and which programming language with which
# the application.
#
# Usage:
#       docker run -it phytoshell [verbosity] [codebase] [language_version_application] [additional arguments]
#
# Input:
#       verbosity: output for iRODS command to download codebase (0-none, 1-strong)
#       codebase: CyVerse path to directory containing code and libraries for the application
#                 [our codebase is /iplant/home/nmiller/phytoMorph_public_deploy]
#       language_version_application: argument must be in this format (delimiter _)
#               language -> m:matlab, r:R, p:python, o:octave, j:julia, b:debug_mode
#               version -> o:original codebase (ours), a:alternate codebase (user-defined)
#               application -> name of application to run
#       additional arguments: any command line arguments to pass into the application
#
=======
# This is the runner script called by the wrapper script that parses through
# command line arguments to determine how to run the application. The wrapper
# script determines whether to run the application through CyVerse or the
# Open Science Grid,
#
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
# Pipeline Overview:
#       1) Check input arguments for language, codebase, and application
#       2) Set codebase directory  and configure language environment
#       3) Re-configure argument order and Run command
#
# Authors
#       Nathan Miller, Senior Scientist (ndmill@gmail.com)
#       Julian Bustamante, Graduate Researcher (jbustamante@wisc.edu)
###############################################################################

<<<<<<< HEAD
set -e

=======
# Determine verbosity level and then remove it from the arguments
# Any non-zero input defaults to strong verbosity
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
verb=$1
set -- "${@:2}"

case $verb in
0)
    vlvl=" "
    ;;

1)
    vlvl="-V"
    ;;

*)
    vlvl="-V"
    ;;

esac

# Check input arguments
printf "* Input Arguments                                            *\n"
printf "*------------------------------------------------------------*\n"
printf "*    Code folder| ${1}\n"
printf "* Lang_[o|a]_app| ${2}\n"
printf "*           Data| ${3}\n"
printf "**************************************************************\n"

# Parse through key_value hash to get language_application
lang=$(echo $2 | cut -f 1 -d _)
ver=$(echo $2 | cut -f 2 -d _)
app=$(echo $2 | cut -f 3 -d _)

printf "* Results from parsed argument Lang_[o|a]_app                *\n"
printf "*------------------------------------------------------------*\n"
printf "* Lang| ${lang} \n"
printf "*  Ver| ${ver} \n"
printf "*  App| ${app}\n"
printf "**************************************************************\n\n\n"

# Get original and user's code folder from iRODS
ofldr="/iplant/home/nmiller/phytoMorph_public_deploy"
afldr=$1
<<<<<<< HEAD
code_target_folder=$(pwd)/codebase
printf "**************************************************************\n"
printf "* Downloading original (phytomorph) codebase                 *\n"
printf "* Source folder: ${ofldr} \n"
startO=$SECONDS
iget -rf $vlvl $ofldr/matlab $code_target_folder/o
iget -rf $vlvl $ofldr/r $code_target_folder/o
iget -rf $vlvl $ofldr/python $code_target_folder/o
iget -rf $vlvl $ofldr/octave $code_target_folder/o
iget -rf $vlvl $ofldr/julia $code_target_folder/o
=======
#code_target_folder=/loadingdock/codebase
code_target_folder=$PWD/loadingdock/codebase
printf "* Downloading original (phytomorph) codebase                 *\n"
printf "* Source folder: ${ofldr} \n"
startO=$SECONDS
iget -r $vlvl "$ofldr/matlab" "$code_target_folder/o"
iget -r $vlvl "$ofldr/r"      "$code_target_folder/o"
iget -r $vlvl "$ofldr/python" "$code_target_folder/o"
iget -r $vlvl "$ofldr/octave" "$code_target_folder/o"
iget -r $vlvl "$ofldr/julia"  "$code_target_folder/o"
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
runO=$(($SECONDS-$startO))
printf "*------------------------------------------------------------*\n"
printf "* ${runO} seconds to download original codebase\n"
printf "**************************************************************\n"

printf "* Downloading alternate codebase                             *\n"
printf "* Source folder: ${afldr} \n"
startA=$SECONDS

case $afldr in
na)
    ;;
*)
<<<<<<< HEAD
    iget -rf $vlvl $afldr/matlab $code_target_folder/a
    iget -rf $vlvl $afldr/r $code_target_folder/a
    iget -rf $vlvl $afldr/python $code_target_folder/a
    iget -rf $vlvl $afldr/octave $code_target_folder/a
    iget -rf $vlvl $afldr/julia $code_target_folder/a
=======
    iget -r $vlvl "$afldr/matlab" "$code_target_folder/a"
    iget -r $vlvl "$afldr/r"      "$code_target_folder/a"
    iget -r $vlvl "$afldr/python" "$code_target_folder/a"
    iget -r $vlvl "$afldr/octave" "$code_target_folder/a"
    iget -r $vlvl "$afldr/julia"  "$code_target_folder/a"
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
    ;;
esac

runA=$(($SECONDS-$startA))
printf "*------------------------------------------------------------*\n"
printf "* ${runA} seconds to download alternate codebase\n"
printf "**************************************************************\n\n\n"


# Set codebase directory and configure language environment
case $lang in
m)
    selection="MATLAB"
    cmd=$code_target_folder/$ver/matlab/DEwrapper
    chmod +x $cmd
    export LD_LIBRARY_PATH=/lib:/lib65:/usr/lib:/usr/local/lib:/usr/local/mcr/v93/runtime/glnxa64:/usr/local/mcr/v93/bin/glnxa64:/usr/local/mcr/v93/sys/os/glnxa64
    export XAPPLRESDIR=/usr/local/mcr/v93/X11/app-defaults
    ;;
<<<<<<< HEAD
r)
    selection="R"
    export PATH="$HOME/anaconda3/bin:$PATH"
    cmd="Rscript $code_target_folder/$ver/r/DEwrapper.R"
=======

r)
    selection="R"
    cmd="/yes/bin/Rscript $code_target_folder/$ver/r/DEwrapper.R"
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
    ;;

p)
    selection="Python"
<<<<<<< HEAD
    export PATH="$HOME/anaconda3/bin:$PATH"
=======
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
    cmd="python $code_target_folder/$ver/python/DEwrapper.py"
    ;;

p2)
    selection="Python2"
<<<<<<< HEAD
    export PATH="$HOME/anaconda3/bin:$PATH"
=======
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
    cmd="python2 $code_target_folder/$ver/python/DEwrapper.py"
    ;;

p3)
<<<<<<< HEAD
    selection="Python3"
    export PATH="$HOME/anaconda3/bin:$PATH"
=======

    selection="Python3"
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
    cmd="python3 $code_target_folder/$ver/python/DEwrapper.py"
    ;;

o)
    selection="Octave"
    cmd="octave -W $code_target_folder/$ver/octave/DEwrapper.m"

    #fin=$code_target_folder/$ver/octave/DEwrapper.m
    #run="octave --eval \"run('$fin')\""
    #cmd="eval $run"

    #echo "DISPLAY=$(echo $DISPLAY)"
    #echo "Setting DISPLAY to $disp"
    #disp=localhost:0
    #export DISPLAY=$disp
    #echo "DISPLAY=$(echo $DISPLAY)"

    #echo "Initiating Xvfb..."
    #Xvfb :0 -screen 0 800x60x16 &
    #x11vnc -display :0 -N

    ;;

j)
    selection="Julia"
    cmd="julia $code_target_folder/$ver/julia/DEwrapper.jl"
    ;;

mi)
    selection="Interactive MATLAB GUI"
    cmd="$code_target_folder/$ver/matlab/iPlant_ver0"
    cp /etc/ssh/sshd_config /etc/ssh/sshd_config.bak
    mv /etc/ssh/sshd_config.x11 /etc/sshd/sshd_config
    passwd --stdin plants
    service ssh restart

    cd /usr/local/mcr/v93/sys/os/glnxa64
    mv libstdc++.so.6 libstdc++.so.6.bak
    cd $cmd
    chmod +x $cmd

<<<<<<< HEAD
    export LD_LIBRARY_PATH=/lib:/lib65:/usr/lib:/usr/local/lib:/usr/local/mcr/v93/runtime/glnxa64:/usr/local/    mcr/v93/bin/glnxa64:/usr/local/mcr/v93/sys/os/glnxa64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
=======
    export LD_LIBRARY_PATH=/lib:/lib65:/usr/lib:/usr/local/lib:/usr/local/mcr/v93/runtime/glnxa64:/usr/local/mcr/v93/bin/glnxa64:/usr/local/mcr/v93/sys/os/glnxa64:/usr/local/nvidia/lib:/usr/local/nvidia/lib64
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
    export XAPPLRESDIR=/usr/local/mcr/v93/X11/app-defaults
    ;;

b)
    selection="Debug Mode"
    cmd=/bin/bash
    ;;

*)
    echo "error: no command specified"
    selection="NO LANGUAGE SELECTED"
    ;;

esac

printf "**************************************************************\n"
printf "* ${selection} selected \n"
printf "**************************************************************\n"

# Reconfigure arguments and Run commands
# Sets codebase directory ($1) to empty and sets application to $2
echo -e "*   Pre-arguments| ${@} "

# Remove codebase from $1 in arglist
# Setting application
set -- "" $app "${@:3}"

printf "*------------------------------------------------------------*\n"
echo -e "*  Post-arguments| ${@} "
printf "**************************************************************\n"

echo -e "* Running Command| ${cmd} ${@} "
printf "**************************************************************\n"

# Set working directory to data storage location and run app
startC=$SECONDS
<<<<<<< HEAD
cd userdata/dataout/
=======
#cd /loadingdock/userdata/dataout/
cd $PWD/loadingdock/userdata/dataout/
>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
$cmd $@
runC=$(($SECONDS-$startC))

printf "**************************************************************\n"
echo -e "* Ending Command| ${cmd} ${@} "
printf "*------------------------------------------------------------*\n"
printf "* ${runC} seconds to run command \n"
printf "**************************************************************\n"
<<<<<<< HEAD
=======



>>>>>>> 2874e14fc44e2714b17ba29734dabfe0bdde62e3
