#!/bin/bash
#################################################################################
# This is the wrapper script that serves as the ENTRYPOINT for the phytoshell
# Docker image. It parses through command line arguments to determine the
# codebase and application to run, and which programming language with which
# to run the application.
#
# Usage:
#       docker run -it phytoshell [verbosity] [codebase] [language_version_application] [additional arguments]
#
# Input:
#       verbosity: output for iRODS command to download codebase (0-none, 1-strong)
#       codebase: CyVerse path to directory containing code and libraries for the application
#                 [our codebase is /iplant/home/nmiller/phytoMorph_public_deploy]
#       language_version_application: argument must be in this format (delimiter _)
#          NOTE: These arguments are to be set from the Discovery Environment using the pull-down menu options.
#                Developers must set these when they build their applications.
#                       language -> m:matlab, mi:matlab gui, r:R, p:python, p2:python2, p3:python3, o:octave, j:julia, b:debug_mode
#                       version -> o:original codebase (ours), a:alternate codebase (user-defined)
#                       application -> name of application to run
#       additional arguments: any command line arguments to pass into the application
#
# Important note about the application parameter:
#       Regardless of the language and application used, the main program must
#       be called DEwrapper followed by the language-specific extension name.
#       (i.e. DEwrapper.py, DEwrapper.jl, etc). This main program can have a
#       switch statement that handles the additional arguments that call a
#       specific application.
#
#       For example, running the MATLAB application maizeSeeling from our
#       default codebase is done using the following command:
#               docker run -it phytoshell 0 na m_o_DEwrapper maizeSeedling
#
# Examples:
# Run the MATLAB application 'methodName' using the default codebase with no verbosity
#   NOTE: The 'na' parameter means do not download an alternate codebase
#       docker run -it phytoshell 0 na m_o_methodName
#
# Run Python application analyzerData with a user's codebase located at
#   /iplant/home/exampleuser/examplecodebase_deploy in verbose mode
#       docker run -it phytoshell 1 /iplant/home/exampleuser/examplecodebase_deploy p_a_analyzeData
#
# Pipeline Overview:
#       1) Check input arguments for language, codebase, and application
#       2) Set codebase directory and configure language environment
#       3) Re-configure argument order and Run command
#
# Authors
#       Nathan Miller, Senior Scientist (ndmill@gmail.com)
#       Julian Bustamante, Graduate Researcher (jbustamante@wisc.edu)
#################################################################################

# Show docker image version
#working_directory=$(pwd)
workingdir=$(pwd)
printf "**************************************************************\n"
printf "*         Phytomorph Docker Image Shell Version 0.5          *\n"
printf "*                  Designed 09/25/2018                       *\n"
printf "*         Authors: Nathan Miller, Julian Bustamante          *\n"
printf "*           Working Directory: %s                  *\n" "$workingdir"
printf "**************************************************************\n"

# Determine if arguments should be run from commandline [run from CyVerse]
# or downloaded from config.json [run from OSG]

# Set PATH to include Anaconda3
export PATH=$PATH:$HOME/anaconda3/bin

# Create directory structure for /loadingdock
mkdir -p "$workingdir"/loadingdock/userdata/datain  \
         "$workingdir"/loadingdock/userdata/dataout \
         "$workingdir"/loadingdock/codebase/o       \
         "$workingdir"/loadingdock/codebase/a

printf "The current date is %s\n" "$(date)"

if [[ $# -eq 0 ]]; then
        echo "No arguments selected. Parsing arguments from config.json"

        # Manually move files we need to our working directory
        cp "$workingdir"/config.json        "$workingdir"/loadingdock
        cp "$workingdir"/output_ticket.list "$workingdir"/loadingdock
        cp "$workingdir"/input_ticket.list  "$workingdir"/loadingdock

        str=$(configOSG.sh)
        output=$( echo $str | cut -f 2 -d [ | cut -f 1 -d ] )
        args=(${output//,/ })

        runner "${args[@]}"

        # Return data to user's iRODS server
        ticketParser.sh "$workingdir"/loadingdock/output_ticket.list iput

else
        # Create iRODS directory running commandline arguments [for CyVerse]
        mkdir -p ~/.irods
        mv /loadingdock/irods_environment.json ~/.irods/
        runner "$@"

fi

